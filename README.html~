<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>README.html</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>

</head>

<body>

<h1 id="sketchdb">sketchdb</h1>
<h3 id="about">About</h3>
<p>This is a small file/directory based app for Node JS that provides
some basic database functionality for storing key-value pairs in
table/row/entry format as .json files.</p>
<p>The purpose of this library is to provide a simple database-like
storage system for things like small personal projects. It is written to
be easy to setup and use.</p>
<p>This library requires no dependencies.</p>
<h3 id="installation">Installation</h3>
<p>run</p>
<pre class="console"><code>npm install sketchdb</code></pre>
<p>in your project’s directory to install a local node module.</p>
<h2 id="usage">Usage</h2>
<h3 id="setup">Setup</h3>
<p>run</p>
<pre class="console"><code>npm exec sketchdb-setup</code></pre>
<p>from the top level of your project directory to setup an instance of
sketchdb.</p>
<p>Alternatively, call sketchdb.setup() from inside a script (note -
sketchdb.setup() is async and returns a promise)</p>
<p>The setup application will create a new directory in that top level
directory of the project named “sketchdb_store” where data will be
stored, along with a subdirectory named “tables”. (that’s all
sketchdb-setup does)</p>
<p>External edits to directories and files in sketchdb_store will
reflect in the database as long as they are proper JSON.</p>
<h3 id="api">API</h3>
<p>All function calls to sketchdb return a Promise.</p>
<p>Calls to retrieve data will resolve to that data or reject with an
error.</p>
<p>Calls to write data or perform a delete operation will resolve with
true on success (this will probably change to an object of some sort
with more info but haven’t decided yet)</p>
<h3 id="methods">Methods</h3>
<ul>
<li><a href="#list_tables">sketchdb.list_tables</a></li>
<li><a href="#create_table">sketchdb.create_table</a></li>
<li><a href="#insert">sketchdb.insert</a></li>
<li><a href="#get_row">sketchdb.get_row</a></li>
<li><a href="#get_all">sketchdb.get_all</a></li>
<li><a href="#update">sketchdb.update</a></li>
<li><a href="#delete_row">sketchdb.delete_row</a></li>
<li><a href="#delete_table">sketchdb.delete_table</a></li>
<li><a href="#filter">sketchdb.filter</a></li>
<li><a href="#rename_table">sketchdb.rename_table</a></li>
</ul>
<h3 id="sketchdb.list_tables"><a name="list_tables"></a>
sketchdb.list_tables</h3>
<p>List the tables in the database in array format.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">list_tables</span>()</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p>none</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns an array of the table names as strings.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">list_tables</span>()</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (error) {</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>            <span class="co">//// handle the error</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">do_something_with_results</span>()<span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">        Results will be an array of the table names such as [&quot;users&quot;,&quot;posts&quot;,&quot;authors&quot;]</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">        */</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span></code></pre></div>
<h3 id="sketchdb.create_table"><a name="create_table"></a>
sketchdb.create_table</h3>
<p>Creates a new table in the database.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">create_table</span>( <span class="st">&#39;table_name&#39;</span> )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>table_name:</em> The name of the table to create (as a
string)</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns true. On rejection, Promise returns the error.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">create_table</span>(<span class="st">&#39;users&#39;</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (error) {</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>            <span class="co">//// handle the error</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span></code></pre></div>
<p><strong>Note:</strong> If you want to add tables to a project without
writing functions to do so, you can create a subdirectory in
“./sketchdb_store/tables/” with the name of the table you want to
create. For example, making “./sketchdb_store/tables/users/” will create
a “users” table in the schema.</p>
<h3 id="sketchdb.insert"><a name="insert"></a> sketchdb.insert</h3>
<p>Inserts a new row into a given table in the database.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">insert</span>( table_name<span class="op">,</span> id<span class="op">,</span>  data )</span></code></pre></div>
<p>or if you want sketchdb to automatically generate a unique id,
use:</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">insert</span>( table_name<span class="op">,</span> data )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>id:</em> a string containing the id for the row. Must be unique
to the table and valid as a directory name.</p>
<p><em>table_name:</em> The name of the table to insert the row into.
Table must already exist.</p>
<p><em>data:</em> The data to be inserted. Will be written as a json
file. Can be a JS object or valid JSON string.</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns the id of the new row.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> user_1 <span class="op">=</span> {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;name&#39;</span><span class="op">:</span> <span class="st">&#39;John Smith&#39;</span><span class="op">,</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;group&#39;</span><span class="op">:</span> <span class="st">&#39;1&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> unique_id <span class="op">=</span> <span class="st">&#39;uq13g564d&#39;</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> stringified <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(user_1)<span class="op">;</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">insert</span>(<span class="st">&#39;users&#39;</span><span class="op">,</span> unique_id<span class="op">,</span> stringified)<span class="op">;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (error) {</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>        <span class="co">//// handle the error</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>or to use 2 arguments and have sketchDB generate a unique id for your
row:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> user_1 <span class="op">=</span> {</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;name&#39;</span><span class="op">:</span> <span class="st">&#39;John Smith&#39;</span><span class="op">,</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;group&#39;</span><span class="op">:</span> <span class="st">&#39;1&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> stringified <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(user_1)<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">insert</span>(<span class="st">&#39;users&#39;</span><span class="op">,</span> stringified)<span class="op">;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (error) {</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">//// handle the error</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="sketchdb.get_row"><a name="get_row"></a> sketchdb.get_row</h3>
<p>Retrieves a row from a given table.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">get_row</span>( table_name<span class="op">,</span> id )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>table_name:</em> The name of the table the row belongs to.</p>
<p><em>id:</em> a string containing the id for the row to retrieve.</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">get_row</span>(<span class="st">&#39;users&#39;</span><span class="op">,</span> <span class="st">&#39;178&#39;</span>)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (error) {</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>            <span class="co">//// handle the error</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>        <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span></code></pre></div>
<h3 id="sketchdb.get_all"><a name="get_all"></a> sketchdb.get_all</h3>
<p>Retrieves all rows from a given table as an array of objects.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">get_all</span>( table_name )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>table_name:</em> The name of the table.</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns an array of objects (the data from each row). On
rejection, Promise returns the error.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb14"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">get_all</span>(<span class="st">&#39;users&#39;</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (error) {</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>            <span class="co">//// handle the error</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">//// results will be an array of the row objects</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    })</span></code></pre></div>
<h3 id="sketchdb.update"><a name="update"></a> sketchdb.update</h3>
<p>Updates a row with new and/or replacement data as key-value pairs of
an object.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb15"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">update</span>( table_name<span class="op">,</span> id<span class="op">,</span> data )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>table_name:</em> The name of the table the row belongs to.</p>
<p><em>id:</em> a string containing the id for the row. Must be unique
to the table and valid as a directory name.</p>
<p><em>data:</em> The data to be used to update the row.</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns true. On rejection, Promise returns the error.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb16"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> user_1 <span class="op">=</span> {</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;name&#39;</span><span class="op">:</span> <span class="st">&#39;Bobby Knuckles&#39;</span><span class="op">,</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;group&#39;</span><span class="op">:</span> <span class="st">&#39;1&#39;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> new_data <span class="op">=</span> {</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;group&#39;</span><span class="op">:</span> <span class="st">&#39;2&#39;</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> unique_id <span class="op">=</span> <span class="st">&#39;uq13g564d&#39;</span><span class="op">;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">update</span>(<span class="st">&quot;users&quot;</span><span class="op">,</span> unique_id<span class="op">,</span> new_data)<span class="op">;</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (error) {</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>        <span class="co">//// handle the error</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* the updated row&#39;s object will look like :</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a><span class="co">        {</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="co">            &#39;name&#39;:&#39;Bobby Knuckles&#39;,</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a><span class="co">            &#39;group&#39;: &#39;2&#39;</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a><span class="co">         }</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a><span class="co">       */</span></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>    <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="sketchdb.delete_row"><a name="delete_row"></a>
sketchdb.delete_row</h3>
<p>Deletes a row from a given table.</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb17"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">delete_row</span>( table_name<span class="op">,</span> id )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>table_name:</em> The name of the table the row belongs to.</p>
<p><em>id:</em> a string containing the id for the row to delete.</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns true. On rejection, Promise returns the error.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb18"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">delete_row</span>(<span class="st">&#39;users&#39;</span><span class="op">,</span> <span class="st">&#39;178&#39;</span>)</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (error) {</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">//// handle the error</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">success_function</span>(results)<span class="op">;</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>  })</span></code></pre></div>
<h3 id="sketchdb.delete_table"><a name="delete_table"></a>
sketchdb.delete_table</h3>
<p>Deletes a table and all contents (rows).</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb19"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">delete_table</span>( table_name )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p>table_name: The name of the table as a string.</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns true. On rejection, Promise returns the error.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb20"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">delete_table</span>(<span class="st">&#39;students&#39;</span>)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(result<span class="op">,</span> error) {</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (error) {</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">//// handle the error</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">success_function</span>()<span class="op">;</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  })<span class="op">;</span></span></code></pre></div>
<h3 id="sketchdb.filter"><a name="filter"></a> sketchdb.filter</h3>
<p>Return an array of any rows in a table that include a given key/value
pair</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb21"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">filter</span>( table_name<span class="op">,</span> key<span class="op">,</span> value )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p><em>table_name:</em> The name of the table the row belongs to.</p>
<p><em>key:</em> The key (as a string) to be used to filter the rows by
{ <em>key</em> : value }</p>
<p><em>value:</em> The value (as a string) to be used to filter the rows
by { key : <em>value</em> }</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns</p>
<p><em>Example usage:</em></p>
<div class="sourceCode" id="cb22"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">filter</span>(<span class="st">&#39;users&#39;</span><span class="op">,</span> <span class="st">&#39;group&#39;</span><span class="op">,</span> <span class="st">&#39;superuser&#39;</span>)<span class="op">;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(results<span class="op">,</span> error) {</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (error) {</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//// handle the error</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">do_something_with_results</span>()<span class="op">;</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">/*</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="co">       results will look something like:</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="co">       [{ &#39;username&#39;: &#39;user_1&#39;,&#39;group&#39;: &#39;superuser&#39; }, {&#39;username&#39;: &#39;user_3&#39;,&#39;group&#39;: &#39;superuser&#39;}]</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a><span class="co">   </span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a><span class="co">   */</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="sketchdb.rename_table"><a name="rename_table"></a>
sketchdb.rename_table</h3>
<p>Renames a table</p>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb23"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">rename_table</span>( table<span class="op">,</span> new_name )</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<p>table: The name of the (old) table to be renamed (as a string).
new_name: The new name for the table (as a string).</p>
<p><strong>Return value:</strong> Returns a Promise. When resolved,
Promise returns true. On rejection, Promise returns the error.</p>
<p><strong>Example usage:</strong></p>
<div class="sourceCode" id="cb24"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>sketchdb<span class="op">.</span><span class="fu">rename_table</span>(<span class="st">&#39;authors&#39;</span><span class="op">,</span> <span class="st">&#39;contributors&#39;</span>)</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(result<span class="op">,</span> error) {</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (error) {</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">//// handle the error</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">success_function</span>()<span class="op">;</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>  })<span class="op">;</span></span></code></pre></div>

</body>
</html>
